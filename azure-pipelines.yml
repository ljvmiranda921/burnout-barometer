# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
    branches:
        include:
        - master
        - refs/tags/*
    tags:
        include:
        - v*

pool:
  vmImage: 'ubuntu-latest'

variables:
  GOBIN:  '$(GOPATH)/bin' # Go binaries path
  GOROOT: '/usr/local/go1.11' # Go installation path
  GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
  modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go version
    go get -v -t -d ./...
    if [ -f Gopkg.toml ]; then
        curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
        dep ensure
    fi
    GOOS=darwin GOARCH=amd64 go build -v -o build/barometer-amd64-darwin .
    GOOS=windows GOARCH=amd64 go build -v -o build/barometer-amd64-windows.exe .
    GOOS=linux GOARCH=amd64 go build -v -o build/barometer-amd64-linux .
    ls build/
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies, then build'


- task: GithubRelease@0
  condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
  inputs:
      gitHubConnection: barometer-release
      repositoryName: '$(build.Repository.Name)'
      assets: build/*
      addChangeLog: true
      compareWith: 'lastRelease'
  displayName: 'Create Github release'
