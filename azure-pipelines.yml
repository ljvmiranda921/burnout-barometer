# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
  branches:
    include:
    - master
    - refs/tags/*
  tags:
    include:
    - v*


stages:
- stage: build
  displayName: BuildExecutable
  variables:
    GOBIN:  '$(GOPATH)/bin' # Go binaries path
    GOROOT: '/usr/local/go1.11' # Go installation path
    GOPATH: '$(system.defaultWorkingDirectory)/gopath' # Go workspace path
    GO111MODULE: 'on'
    modulePath: '$(GOPATH)/src/github.com/$(build.repository.name)' # Path to the module's code
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
        matrix:
          Linux:
            os.platform: 'linux'
          Darwin:
            os.platform: 'darwin'
          Windows:
            os.platform: 'windows'
            extension: '.exe'
    steps:
    - script: |
        mkdir -p '$(GOBIN)'
        mkdir -p '$(GOPATH)/pkg'
        mkdir -p '$(modulePath)'
        shopt -s extglob
        shopt -s dotglob
        mv !(gopath) '$(modulePath)'
        echo '##vso[task.prependpath]$(GOBIN)'
        echo '##vso[task.prependpath]$(GOROOT)/bin'
      displayName: 'Set up the Go workspace'
    - script: |
        go version
        GOOS=$(os.platform) go get -v -t -d ./...
      workingDirectory: '$(modulePath)'
      displayName: 'Get dependencies'
    - script: |
        GOOS=$(os.platform) GOARCH=amd64 go build -v -o build/barometer-amd64-$(os.platform)$(extension) .
      workingDirectory: '$(modulePath)'
      displayName: 'Build executable'
    - task: CopyFiles@2
      inputs:
          sourceFolder: $(modulePath)/build/
          contents: '*'
          targetFolder: $(Build.ArtifactStagingDirectory)
      displayName: 'Copy files to Artifact Staging Directory'
    - task: PublishPipelineArtifact@0
      inputs:
          artifactName: barometer-$(os.platform) 
          targetPath: $(Build.ArtifactStagingDirectory)
      displayName: 'Publish pipeline artifact'
- stage: publish
  displayName: PublishArtifacts
  jobs:
  - job: Publish
    steps:
      - task: DownloadPipelineArtifact@2
      - script: |
          mkdir artifacts
          cp '$(Pipeline.Workspace)'/barometer-*/* artifacts
          ls artifacts/*
        displayName: Copy all artifacts
      - task: GithubRelease@0
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        inputs:
          gitHubConnection: barometer-release
          repositoryName: '$(build.Repository.Name)'
          assets: artifacts/*
          addChangeLog: true
          compareWith: 'lastRelease'
        displayName: 'Create Github release'
      - task: Docker@2 
        # condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
        inputs:
          command: buildAndPush
          repository: ljvmiranda921/burnout-barometer
          containerRegistry: gcrServiceConnection
          tags: |
              latest
              $(Build.SourceBranchName)
        displayName: 'Build Docker image and push'



